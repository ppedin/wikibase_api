"""
This code defines detectors, which are objects with a detect method.
The method allows to check if a xml file contains a specific field.
The classes are based on the schema defined by Links.
"""

import xml.etree.ElementTree as ET
from lxml import etree
import re


def get_namespace(element):
    """Extract the namespace from an XML element tag."""
    m = re.match(r'\{(.*)\}', element.tag)
    return m.group(1) if m else None


class Detector():
    """
    Generic class for detectors. 
    Implements minimal functionalities used by all detectors.
    """
    def __init__(self):
        pass

    def parser(self, xml_content):
        """
        Parse the XML content and return the root element.
        Operates on the byte representation generated by the FileUpload.read() method of FastAPI. 
        """
        return etree.fromstring(xml_content)

    def get_namespace(self, element):
        """Extract the namespace from an XML element tag."""
        m = re.match(r'\{(.*)\}', element.tag)
        return m.group(1) if m else None


class TitleDetector(Detector):
    """
    This class is a detector for the field Title
    """
    def __init__(self):
        self.field = 'title'
        super().__init__()

    def detect(self, xml_content):
        """
        Detects if the Title field can be found in the XML content.
        Takes as input the byte representation of the XML content produced by the FileUpload.read() method of FastAPI.
        Uses the schemas defined by Links. 
        """
        root = self.parser(xml_content)  #  Uses the general method to parse the file using lxml. 
        ns = self.get_namespace(root)
        ns_map = {'ns': ns} if ns else {}

        # Create namespace-aware path expressions
        if ns:
            # With namespace
            titlestmt_path = ".//ns:titleStmt"
            title_path = ".//ns:title[@type='main']"
            sourcedesc_path = ".//ns:sourceDesc//ns:biblFull//ns:titleStmt"
        else:
            # No namespace
            titlestmt_path = ".//titleStmt"
            title_path = ".//title[@type='main']"
            sourcedesc_path = ".//sourceDesc//biblFull//titleStmt"

        # Check for <title type="main"> under <titleStmt>
        for titlestmt in root.xpath(titlestmt_path, namespaces=ns_map):  #  Looks for any titleStmt element in the namespace, using ns: to reference elements in that namespace.
            #  namespaces=ns_map maps the prefix ns: to the actual namespace URI extracted from the document.
            # Only check direct children titleStmt to avoid picking up nested ones
            parent = titlestmt.getparent()  #  Retrieves the parent element of the titleStmt element we're examining. 
            if parent is not None and parent.tag.endswith('sourceDesc'):  #  These cases (titleStmt under sourceDesc) will be treated separately.
                continue
                
            title_elements = titlestmt.xpath(title_path, namespaces=ns_map)  #  Looks for any title element with type="main" under the titleStmt element
            if title_elements:
                for title in title_elements:
                    if title.text:
                        return True

        # Check for <title type="main"> under <sourceDesc><biblFull><titleStmt>
        for sourcedesc_titlestmt in root.xpath(sourcedesc_path, namespaces=ns_map):  #  Looks for any titleStmt element with a namespace, using ns: to reference elements in that namespace.
            title_elements = sourcedesc_titlestmt.xpath(title_path, namespaces=ns_map)  #  Looks for any title element with type="main" under the titleStmt element 
            if title_elements:
                for title in title_elements:
                    if title.text:
                        return True

        return False